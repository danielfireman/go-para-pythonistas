Go para Pythonistas
[web_app]

Daniel Fireman
Professor, IFAL
danielfireman@gmail.com
@daniellfireman

* Objetivo desse tutorial

Criar uma aplicação usando web simples usando Go
Aumentar a curiosidade de vocês por Go

.image img/gopher.jpg

: Embora o tutorial seja melhor aproveitado por quem conheça python e já
: tenha feito uma aplicação web, não requisito.

* Introdução

* Coisas que eu gosto em Python

- Fácil de ler e entender
- Comunidade muito bacana
- Muitas bibliotecas com grande qualidade
- Rápido o suficiente para a maioria dos casos (principalmente quando compilado)
- Extensível: via C e assembly

* O que não gosto

- Migrar entre versões demanda trabalho
- Pode ser lento em alguns casos
- Implantação - Gerenciamento de dependência
- Não é amigo e threads/concorrência
.link http://youtu.be/ph374fJqFPE Inside the Python GIL, by David Beazley
- Muita mágica! (e.g.: `__magic__`: `**kargs`, `__getattr__`)
.link https://rszalski.github.io/magicmethods/ Lista de métodos mágicos em Python

* O que é Go

- jovem, mas nem tanto (lançada em novembro de 2009, 1.0 em Março 2012)
- simples, super fácil de ler e aprender
- biblioteca padrão poderosa, e muito mais desenvolvido pela comunidade
- código fonte aberto (BSD)
- comunidade extraordinária, inclusão e diversidade em primeiro lugar 
- extensível, via C e Assembly

* E ainda ...

- fácil de migrar entre versões (`go` `fix`)
- gerenciador de dependências integrado
- cmpila para código de máquina, estaticamente ligado
- pensada para concorrência, mas ainda tem as primitivas conhecidas
- suporte fantástico de ferramentas (lint, vet, race detector)

* Sobre tipagem dinâmica

Pode ser bacana pois é concisa, mas:

	a = "olá"
	b = 1
	a = 2 # Hã?

Tipagem estática pode ser verboso, como Java or C++:

	Boom boom = new Boom();

Mas também temos tipagem estática com inferrência de tipos, como Go:

	a := "olá"
	b := 1
	a = 2  // Erro de compilação!

Tipagem estática em Python? Dá uma olhada em [[http://www.mypy-lang.org/][mypy]] e [[http://cython.org/][Cython]].


* Quem usa Go?

.link https://github.com/tsuru/tsuru Globo.com, tusru
.link https://github.com/juju/juju Canonical, juju
.link https://talks.golang.org/2013/oscon-dl.slide#1 Google, dl.google.com 
.link https://github.com/nytimes/gizmo New York Times, gizmo

Software feito em Go
.link https://github.com/kubernetes/kubernetes kubernetes
.link https://github.com/dgraph-io/dgraph dgraph
.link https://github.com/cockroachdb/cockroach cockroachdb
.link https://github.com/etcd-io/etcd etcd

E muito mais!

* Mão na massa: "Olá, Pythonistas"

* Antes de começar

- Instalar Git e Go
- Clonar repo

    git clone https://github.com/danielfireman/go-para-pythonistas

- Criar seu diretório de trabalho

    mkdir web_app
    cd web_app

-  Vou mostrar o conteúdo, você pode copiar, colar e ir testando
-  Por favor, tente fazer os exercícios

* Módulos

- Módulos são coleções de pacotes
- Unidade fundamental de dependência de código
- O início de um módulo ativa o sistema de resolução automática de dependências
- São descritos num arquivo chamado `go.mod`
- Iniciando um módulo

    go mod init "gpp"

.link https://blog.golang.org/using-go-modules Mais sobre módulos em go

* hello.go

    package main

    import "github.com/labstack/echo/v4"

    func main() {
        e := echo.New()
        e.GET("/", func(c echo.Context) error {
            return c.String(200, "Olá, Pythonistas!")
        })
        e.Start(":8000")
    }

Para rodar

    go run hello.go

* Só para comparar, hello.py

    from flask import Flask
    app = Flask(__name__)


    @app.route('/')
    def hello():
        return "Olá, Pythonistas!"

    if __name__ == '__main__':
        app.run(debug=True, port=8000)

Para rodar

    python3.5 hello.py

* Mão na massa: Servidor!

* API REST para listas de coisas a fazer (TODO)

.code todo.go / INICIO MAIN/,/ FIM MAIN/

* Novo Item: PUT "/"

* Structs e Slices

.code todo.go / INICIO STRUCT/,/ FIM STRUCT/

: structs é um tipo definido pelo usuário que contém uma coleção de campos (propriedades).
: São usados para agrupar dados formando uma unidade. Vindo do mundo Python, você pode pensar
: numa struct como uma classe leve, que suporta composição e polimorfismo, porém não suporta
: herança de código. Não vamos entrar fundo em structs, isso é assunto de um outro tutorial.

: Slices são bem conhecidos no mundo Python. Quase todas as operações aqui se mantem, só que são
: feitas de forma ligeiramente diferente. Ah, não temos list compreension em Go :(

* Código

.code todo.go / INICIO NOVO/,/ FIM NOVO/

* Invocação

Sucesso

    curl -X PUT -H 'Content-Type: application/json' -d '{"desc":"Tapioca"}' http://localhost:8000

Erro

    curl -v -X PUT -H 'Content-Type: application/json' -d '{"desc":""}' http://localhost:8000

    curl -v X PUT http://localhost:8000

* Teste Automático

.code todo_test.go / INICIO NOVO/,/ FIM NOVO/

Para rodar

    go test -v todo*.go

* Busca Item: GET "/:id"

* Código

.code todo.go / INICIO BUSCA/,/ FIM BUSCA/

* Invocação

Sucesso

    # Adiciona Item
    curl -X PUT -H 'Content-Type: application/json' -d '{"desc":"Tapioca"}' http://localhost:8000

    # Busca Item
    curl -X GET http://localhost:8000/0

Erro

    curl -v -X GET http://localhost:8000/1

* Lista Itens: GET "/itens"

* E aí?

.image img/bored.gif
.caption by [[https://giphy.com][giphy.com]]

* Código

.code todo.go / INICIO LISTA/,/ FIM LISTA/

Invocação

    curl -X GET http://localhost:8000/lista

* Mão na massa: Cliente!

* Dica:

.link https://golang.org/pkg/net/http/ O pacote http

.image img/bored.gif
.caption by [[https://giphy.com][giphy.com]]

: A ideia aqui é pedir que as pessoas tentem fazer e estimular
: a leitua do godoc. Daí ir via tentativa e erro, guiado pelo compilador
: e exemplos.

* Código: Flags

.code cliente.go / INICIO FLAGS/,/ FIM FLAGS/

* Código: Flags

.code cliente.go / INICIO MAIN/,/ FIM MAIN/

* Invocação

Adicionando item:

    go run cliente.go --metodo=PUT --corpo={\"desc\":\"tapioca\"}


Listando itens:

    go run cliente.go --metodo=GET --url http://localhost:8000/lista

* Conclusão

Go se parece com Python:

- simples
- flexível
- divertido
- biblioteca padrão robusta
- comunidade sensacional

Mas também é diferente em diversas coisas:

- rápido
- concorrente
- estaticamente tipado
- gerenciamento de dependências nativo

* Outras Apresentações/Inspirações

.link https://speakerdeck.com/ramalho/go-a-visao-de-um-pythonista Go: a visão de um Pythonista (Luciano Ramalho)
.link https://talks.golang.org/2013/go4python.slide#1 Go para Pythonistas (Francesc Campoy)
.link https://talks.golang.org/2012/zen.slide#1 Go and the Zen of Python (Andrew Gerrand)